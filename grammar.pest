// SQL
comment = _{ NEWLINE ~ (" " | "\t")* ~ "--" ~ !("!" | ":") ~ (!NEWLINE ~ ANY)*}
string_constant = _{
    "'" 
    ~ ("''" | (!"'" ~ ANY))*
    ~ "'"
}
quoted_identifier = _{
    "\"" 
    ~ (!"\"" ~ ANY)* 
    ~ "\""
}
c_style = _{
    "E"
    ~ "'"
    ~ ( "\\\\" | "''" | "\\'" | (!"'" ~ ANY))*
    ~ "'"
}
dollar_quoted = _{
    "$" ~ PUSH((!"$" ~ ANY)*) ~ "$" 
    ~ (!("$" ~ POP ~ "$") ~ ANY)* 
    ~ ("$" ~ POP ~ "$")
}
sql_string = _{string_constant | quoted_identifier | c_style | dollar_quoted}

// Whitespace
query_annotation_token = _{NEWLINE ~ (" " | "\t")* ~ "--!" | "--!" }
type_annotation_token = _{NEWLINE ~ (" " | "\t")* ~ "--:" | "--:" }
blank = _{ comment | " " | "\t" }
query_ws = _{ query_annotation_token | blank  }
type_ws = _{ type_annotation_token | blank  }

// Numbers
number = { ASCII_DIGIT+ }

// Postgres identifiers
ident = { 
    !"_"+
    ~ (("_" | LETTER) ~ (LETTER | ASCII_DIGIT | "_")*) 
}
nullable = {ident ~ "?"}
extended_bind_parameter = _{":" ~ ident}
pg_bind_parameter = _{"$" ~ number}

// Type annotation
row = {^"row"}
param = {^"param"}
db = {^"db"}
type_annotation_kind = _{row | param | db}
type_field_list = {
	"(" ~ type_ws* 
    ~ ((nullable | ident) ~ type_ws* 
        ~ ("," ~ type_ws* ~ (nullable | ident) ~ type_ws*)*)? 
    ~ ","? ~ type_ws* 
    ~ ")"
}

type_without_nullable_cols = {ident}
type_with_nullable_cols = {ident ~ type_ws* ~ type_field_list}

type_list = {
	"(" ~ type_ws* 
    ~ ( (type_with_nullable_cols | type_without_nullable_cols) ~ type_ws* 
        ~ ("," ~ type_ws* ~  (type_with_nullable_cols | type_without_nullable_cols) ~ type_ws*)*)? 
    ~ ","? ~ type_ws* 
    ~ ")"
}

type_annotation = {
	type_annotation_token 
    ~ type_ws* ~ type_annotation_kind  
    ~ type_ws* ~ (type_with_nullable_cols | type_without_nullable_cols)
    ~ (type_ws* ~ NEWLINE+)
}
type_annotation_list = {
	type_annotation_token 
    ~ type_ws* ~ type_annotation_kind  
    ~ type_ws* ~ type_list
    ~ (type_ws* ~ NEWLINE+)
}

type_annotation_enum = _{type_annotation | type_annotation_list}

// Query annotation
query_param = {(ident | query_field_list)}
query_row = {(ident | query_field_list)}

query_field_list = {
	"(" ~ query_ws* 
    ~ ((nullable | ident) ~ query_ws* 
        ~ ("," ~ query_ws* ~ (nullable | ident) ~ query_ws*)*)? 
    ~ ","? ~ query_ws* 
    ~ ")"
}
query_annotation = {
    query_annotation_token
    ~ (query_ws* ~ ident)
    ~ (query_ws* ~ query_param)?
    ~ (query_ws* ~ ":" ~ query_ws* ~ query_row)?
    ~ (query_ws* ~ NEWLINE+)
}

// Query
query = {
    query_annotation
    ~ sql
}

// SQL Block
sql = {
	(
	    sql_string
        | "::" 
	    | (extended_bind_parameter | pg_bind_parameter)
	    | (!(query_annotation_token | type_annotation_token) ~ ANY)
	)+
}

// Parser
eoi = _{ !ANY }
parser = {SOI ~ (blank* ~ (type_annotation_enum | query))* ~ eoi}